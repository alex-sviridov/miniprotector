// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: api/backup.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	StreamId int32                  `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Types that are valid to be assigned to RequestType:
	//
	//	*FileRequest_FileInfo
	//	*FileRequest_ChunkHash
	//	*FileRequest_ChunkData
	RequestType   isFileRequest_RequestType `protobuf_oneof:"request_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	mi := &file_api_backup_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_backup_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_api_backup_proto_rawDescGZIP(), []int{0}
}

func (x *FileRequest) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *FileRequest) GetRequestType() isFileRequest_RequestType {
	if x != nil {
		return x.RequestType
	}
	return nil
}

func (x *FileRequest) GetFileInfo() *FileInfo {
	if x != nil {
		if x, ok := x.RequestType.(*FileRequest_FileInfo); ok {
			return x.FileInfo
		}
	}
	return nil
}

func (x *FileRequest) GetChunkHash() *ChunkHash {
	if x != nil {
		if x, ok := x.RequestType.(*FileRequest_ChunkHash); ok {
			return x.ChunkHash
		}
	}
	return nil
}

func (x *FileRequest) GetChunkData() *ChunkData {
	if x != nil {
		if x, ok := x.RequestType.(*FileRequest_ChunkData); ok {
			return x.ChunkData
		}
	}
	return nil
}

type isFileRequest_RequestType interface {
	isFileRequest_RequestType()
}

type FileRequest_FileInfo struct {
	FileInfo *FileInfo `protobuf:"bytes,2,opt,name=file_info,json=fileInfo,proto3,oneof"`
}

type FileRequest_ChunkHash struct {
	ChunkHash *ChunkHash `protobuf:"bytes,3,opt,name=chunk_hash,json=chunkHash,proto3,oneof"`
}

type FileRequest_ChunkData struct {
	ChunkData *ChunkData `protobuf:"bytes,4,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*FileRequest_FileInfo) isFileRequest_RequestType() {}

func (*FileRequest_ChunkHash) isFileRequest_RequestType() {}

func (*FileRequest_ChunkData) isFileRequest_RequestType() {}

type FileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Hostname      string                 `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Attributes    []byte                 `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_api_backup_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_backup_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_api_backup_proto_rawDescGZIP(), []int{1}
}

func (x *FileInfo) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetAttributes() []byte {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ChunkHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Blake3Hash    string                 `protobuf:"bytes,2,opt,name=blake3_hash,json=blake3Hash,proto3" json:"blake3_hash,omitempty"`
	ChunkIndex    int64                  `protobuf:"varint,3,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	ChunkSize     int64                  `protobuf:"varint,4,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkHash) Reset() {
	*x = ChunkHash{}
	mi := &file_api_backup_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkHash) ProtoMessage() {}

func (x *ChunkHash) ProtoReflect() protoreflect.Message {
	mi := &file_api_backup_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkHash.ProtoReflect.Descriptor instead.
func (*ChunkHash) Descriptor() ([]byte, []int) {
	return file_api_backup_proto_rawDescGZIP(), []int{2}
}

func (x *ChunkHash) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ChunkHash) GetBlake3Hash() string {
	if x != nil {
		return x.Blake3Hash
	}
	return ""
}

func (x *ChunkHash) GetChunkIndex() int64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *ChunkHash) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

type ChunkData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Blake3Hash    string                 `protobuf:"bytes,2,opt,name=blake3_hash,json=blake3Hash,proto3" json:"blake3_hash,omitempty"`
	ChunkIndex    int64                  `protobuf:"varint,3,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	Data          []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkData) Reset() {
	*x = ChunkData{}
	mi := &file_api_backup_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkData) ProtoMessage() {}

func (x *ChunkData) ProtoReflect() protoreflect.Message {
	mi := &file_api_backup_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkData.ProtoReflect.Descriptor instead.
func (*ChunkData) Descriptor() ([]byte, []int) {
	return file_api_backup_proto_rawDescGZIP(), []int{3}
}

func (x *ChunkData) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ChunkData) GetBlake3Hash() string {
	if x != nil {
		return x.Blake3Hash
	}
	return ""
}

func (x *ChunkData) GetChunkIndex() int64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *ChunkData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type FileResponse struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	StreamId int32                  `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Types that are valid to be assigned to ResponseType:
	//
	//	*FileResponse_FileNeeded
	//	*FileResponse_ChunkNeeded
	//	*FileResponse_Result
	ResponseType  isFileResponse_ResponseType `protobuf_oneof:"response_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileResponse) Reset() {
	*x = FileResponse{}
	mi := &file_api_backup_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResponse) ProtoMessage() {}

func (x *FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_backup_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResponse.ProtoReflect.Descriptor instead.
func (*FileResponse) Descriptor() ([]byte, []int) {
	return file_api_backup_proto_rawDescGZIP(), []int{4}
}

func (x *FileResponse) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *FileResponse) GetResponseType() isFileResponse_ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return nil
}

func (x *FileResponse) GetFileNeeded() *FileNeeded {
	if x != nil {
		if x, ok := x.ResponseType.(*FileResponse_FileNeeded); ok {
			return x.FileNeeded
		}
	}
	return nil
}

func (x *FileResponse) GetChunkNeeded() *ChunkNeeded {
	if x != nil {
		if x, ok := x.ResponseType.(*FileResponse_ChunkNeeded); ok {
			return x.ChunkNeeded
		}
	}
	return nil
}

func (x *FileResponse) GetResult() *ProcessingResult {
	if x != nil {
		if x, ok := x.ResponseType.(*FileResponse_Result); ok {
			return x.Result
		}
	}
	return nil
}

type isFileResponse_ResponseType interface {
	isFileResponse_ResponseType()
}

type FileResponse_FileNeeded struct {
	FileNeeded *FileNeeded `protobuf:"bytes,2,opt,name=file_needed,json=fileNeeded,proto3,oneof"`
}

type FileResponse_ChunkNeeded struct {
	ChunkNeeded *ChunkNeeded `protobuf:"bytes,3,opt,name=chunk_needed,json=chunkNeeded,proto3,oneof"`
}

type FileResponse_Result struct {
	Result *ProcessingResult `protobuf:"bytes,4,opt,name=result,proto3,oneof"`
}

func (*FileResponse_FileNeeded) isFileResponse_ResponseType() {}

func (*FileResponse_ChunkNeeded) isFileResponse_ResponseType() {}

func (*FileResponse_Result) isFileResponse_ResponseType() {}

type FileNeeded struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Needed        bool                   `protobuf:"varint,2,opt,name=needed,proto3" json:"needed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileNeeded) Reset() {
	*x = FileNeeded{}
	mi := &file_api_backup_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileNeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileNeeded) ProtoMessage() {}

func (x *FileNeeded) ProtoReflect() protoreflect.Message {
	mi := &file_api_backup_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileNeeded.ProtoReflect.Descriptor instead.
func (*FileNeeded) Descriptor() ([]byte, []int) {
	return file_api_backup_proto_rawDescGZIP(), []int{5}
}

func (x *FileNeeded) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileNeeded) GetNeeded() bool {
	if x != nil {
		return x.Needed
	}
	return false
}

type ChunkNeeded struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Blake3Hash    string                 `protobuf:"bytes,2,opt,name=blake3_hash,json=blake3Hash,proto3" json:"blake3_hash,omitempty"`
	Send          bool                   `protobuf:"varint,3,opt,name=send,proto3" json:"send,omitempty"` // true means "SEND", false means "skip"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkNeeded) Reset() {
	*x = ChunkNeeded{}
	mi := &file_api_backup_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkNeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkNeeded) ProtoMessage() {}

func (x *ChunkNeeded) ProtoReflect() protoreflect.Message {
	mi := &file_api_backup_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkNeeded.ProtoReflect.Descriptor instead.
func (*ChunkNeeded) Descriptor() ([]byte, []int) {
	return file_api_backup_proto_rawDescGZIP(), []int{6}
}

func (x *ChunkNeeded) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ChunkNeeded) GetBlake3Hash() string {
	if x != nil {
		return x.Blake3Hash
	}
	return ""
}

func (x *ChunkNeeded) GetSend() bool {
	if x != nil {
		return x.Send
	}
	return false
}

type ProcessingResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessingResult) Reset() {
	*x = ProcessingResult{}
	mi := &file_api_backup_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingResult) ProtoMessage() {}

func (x *ProcessingResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_backup_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingResult.ProtoReflect.Descriptor instead.
func (*ProcessingResult) Descriptor() ([]byte, []int) {
	return file_api_backup_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessingResult) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ProcessingResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProcessingResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_api_backup_proto protoreflect.FileDescriptor

const file_api_backup_proto_rawDesc = "" +
	"\n" +
	"\x10api/backup.proto\x12\rbackupservice\"\xe8\x01\n" +
	"\vFileRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\x05R\bstreamId\x126\n" +
	"\tfile_info\x18\x02 \x01(\v2\x17.backupservice.FileInfoH\x00R\bfileInfo\x129\n" +
	"\n" +
	"chunk_hash\x18\x03 \x01(\v2\x18.backupservice.ChunkHashH\x00R\tchunkHash\x129\n" +
	"\n" +
	"chunk_data\x18\x04 \x01(\v2\x18.backupservice.ChunkDataH\x00R\tchunkDataB\x0e\n" +
	"\frequest_type\"v\n" +
	"\bFileInfo\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1a\n" +
	"\bhostname\x18\x02 \x01(\tR\bhostname\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\x12\x1e\n" +
	"\n" +
	"attributes\x18\x04 \x01(\fR\n" +
	"attributes\"\x88\x01\n" +
	"\tChunkHash\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1f\n" +
	"\vblake3_hash\x18\x02 \x01(\tR\n" +
	"blake3Hash\x12\x1f\n" +
	"\vchunk_index\x18\x03 \x01(\x03R\n" +
	"chunkIndex\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x04 \x01(\x03R\tchunkSize\"}\n" +
	"\tChunkData\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1f\n" +
	"\vblake3_hash\x18\x02 \x01(\tR\n" +
	"blake3Hash\x12\x1f\n" +
	"\vchunk_index\x18\x03 \x01(\x03R\n" +
	"chunkIndex\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\"\xf6\x01\n" +
	"\fFileResponse\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\x05R\bstreamId\x12<\n" +
	"\vfile_needed\x18\x02 \x01(\v2\x19.backupservice.FileNeededH\x00R\n" +
	"fileNeeded\x12?\n" +
	"\fchunk_needed\x18\x03 \x01(\v2\x1a.backupservice.ChunkNeededH\x00R\vchunkNeeded\x129\n" +
	"\x06result\x18\x04 \x01(\v2\x1f.backupservice.ProcessingResultH\x00R\x06resultB\x0f\n" +
	"\rresponse_type\"@\n" +
	"\n" +
	"FileNeeded\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x16\n" +
	"\x06needed\x18\x02 \x01(\bR\x06needed\"^\n" +
	"\vChunkNeeded\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1f\n" +
	"\vblake3_hash\x18\x02 \x01(\tR\n" +
	"blake3Hash\x12\x12\n" +
	"\x04send\x18\x03 \x01(\bR\x04send\"b\n" +
	"\x10ProcessingResult\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess2c\n" +
	"\rBackupService\x12R\n" +
	"\x13ProcessBackupStream\x12\x1a.backupservice.FileRequest\x1a\x1b.backupservice.FileResponse(\x010\x01B\tZ\a./protob\x06proto3"

var (
	file_api_backup_proto_rawDescOnce sync.Once
	file_api_backup_proto_rawDescData []byte
)

func file_api_backup_proto_rawDescGZIP() []byte {
	file_api_backup_proto_rawDescOnce.Do(func() {
		file_api_backup_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_backup_proto_rawDesc), len(file_api_backup_proto_rawDesc)))
	})
	return file_api_backup_proto_rawDescData
}

var file_api_backup_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_backup_proto_goTypes = []any{
	(*FileRequest)(nil),      // 0: backupservice.FileRequest
	(*FileInfo)(nil),         // 1: backupservice.FileInfo
	(*ChunkHash)(nil),        // 2: backupservice.ChunkHash
	(*ChunkData)(nil),        // 3: backupservice.ChunkData
	(*FileResponse)(nil),     // 4: backupservice.FileResponse
	(*FileNeeded)(nil),       // 5: backupservice.FileNeeded
	(*ChunkNeeded)(nil),      // 6: backupservice.ChunkNeeded
	(*ProcessingResult)(nil), // 7: backupservice.ProcessingResult
}
var file_api_backup_proto_depIdxs = []int32{
	1, // 0: backupservice.FileRequest.file_info:type_name -> backupservice.FileInfo
	2, // 1: backupservice.FileRequest.chunk_hash:type_name -> backupservice.ChunkHash
	3, // 2: backupservice.FileRequest.chunk_data:type_name -> backupservice.ChunkData
	5, // 3: backupservice.FileResponse.file_needed:type_name -> backupservice.FileNeeded
	6, // 4: backupservice.FileResponse.chunk_needed:type_name -> backupservice.ChunkNeeded
	7, // 5: backupservice.FileResponse.result:type_name -> backupservice.ProcessingResult
	0, // 6: backupservice.BackupService.ProcessBackupStream:input_type -> backupservice.FileRequest
	4, // 7: backupservice.BackupService.ProcessBackupStream:output_type -> backupservice.FileResponse
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_api_backup_proto_init() }
func file_api_backup_proto_init() {
	if File_api_backup_proto != nil {
		return
	}
	file_api_backup_proto_msgTypes[0].OneofWrappers = []any{
		(*FileRequest_FileInfo)(nil),
		(*FileRequest_ChunkHash)(nil),
		(*FileRequest_ChunkData)(nil),
	}
	file_api_backup_proto_msgTypes[4].OneofWrappers = []any{
		(*FileResponse_FileNeeded)(nil),
		(*FileResponse_ChunkNeeded)(nil),
		(*FileResponse_Result)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_backup_proto_rawDesc), len(file_api_backup_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_backup_proto_goTypes,
		DependencyIndexes: file_api_backup_proto_depIdxs,
		MessageInfos:      file_api_backup_proto_msgTypes,
	}.Build()
	File_api_backup_proto = out.File
	file_api_backup_proto_goTypes = nil
	file_api_backup_proto_depIdxs = nil
}
